import os
import random
import pandas as pd
import base64
import time
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

# –û–±–ª–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Gmail API - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π scope
SCOPES = ['https://www.googleapis.com/auth/gmail.compose']

class EmailSender:
    def __init__(self):
        self.service = None
        self.templates = [
            """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {company_name}!""",

            """–ü—Ä–∏–≤–µ—Ç, {company_name}!"""
        ]

    def authenticate_gmail(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google OAuth"""
        creds = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ credentials.json
        if not os.path.exists('credentials.json'):
            print("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
            print("1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://console.cloud.google.com/")
            print("2. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏ –≤–∫–ª—é—á–∏—Ç–µ Gmail API")
            print("3. –°–æ–∑–¥–∞–π—Ç–µ OAuth 2.0 Client ID –¥–ª—è Desktop application")
            print("4. –°–∫–∞—á–∞–π—Ç–µ JSON —Ñ–∞–π–ª –∫–∞–∫ 'credentials.json'")
            return False
        
        # –§–∞–π–ª token.json —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if os.path.exists('token.json'):
            creds = Credentials.from_authorized_user_file('token.json', SCOPES)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
                creds.refresh(Request())
            else:
                print("\nüîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø GOOGLE:")
                print("=" * 40)
                print("‚úÖ –°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä")
                print("‚úÖ –í–æ–π–¥–∏—Ç–µ –≤ –≤–∞—à Google –∞–∫–∫–∞—É–Ω—Ç")
                print("‚úÖ –ü—Ä–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏ '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ':")
                print("   ‚Üí –ù–∞–∂–º–∏—Ç–µ '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'")
                print("   ‚Üí –í—ã–±–µ—Ä–∏—Ç–µ '–ü–µ—Ä–µ–π—Ç–∏ –≤ testsites (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)'")
                print("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ Gmail")
                print("=" * 40)
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                
                flow = InstalledAppFlow.from_client_secrets_file(
                    'credentials.json', SCOPES)
                creds = flow.run_local_server(port=0, open_browser=True)
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            with open('token.json', 'w') as token:
                token.write(creds.to_json())

        try:
            self.service = build('gmail', 'v1', credentials=creds)
            print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Gmail!")
            return True
        except Exception as error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gmail: {error}")
            return False

    def create_message(self, to_email, subject, message_text):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        message = MIMEMultipart()
        message['to'] = to_email
        message['subject'] = subject
        
        msg = MIMEText(message_text, 'plain', 'utf-8')
        message.attach(msg)
        
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ base64
        raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode('utf-8')
        return {'raw': raw_message}

    def send_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Gmail API"""
        try:
            sent_message = self.service.users().messages().send(
                userId="me", body=message).execute()
            return True, sent_message["id"]
        except Exception as error:
            return False, str(error)

    def read_excel_data(self, excel_file_path):
        """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(excel_file_path):
                print(f"‚ùå –§–∞–π–ª {excel_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return None
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å "–õ–∏—Å—Ç1"
            try:
                df = pd.read_excel(excel_file_path, sheet_name='–õ–∏—Å—Ç1')
                print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ –ª–∏—Å—Ç–∞ '–õ–∏—Å—Ç1'")
            except:
                # –ï—Å–ª–∏ "–õ–∏—Å—Ç1" –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
                df = pd.read_excel(excel_file_path, sheet_name=0)
                print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞")
            
            return df
        except Exception as error:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {error}')
            return None

    def preview_data(self, df, company_col, email_col):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:")
        print("-" * 50)
        
        valid_rows = 0
        for index, row in df.iterrows():
            company_name = row.get(company_col, '')
            email = row.get(email_col, '')
            
            if pd.notna(company_name) and pd.notna(email) and company_name and email:
                valid_rows += 1
                if valid_rows <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫
                    print(f"{valid_rows}. {company_name} ‚Üí {email}")
        
        if valid_rows > 5:
            print(f"... –∏ –µ—â–µ {valid_rows - 5} –∑–∞–ø–∏—Å–µ–π")
        
        print(f"\n‚úÖ –í—Å–µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {valid_rows}")
        print("-" * 50)
        
        return valid_rows

    def send_bulk_emails(self, excel_file_path, subject="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞", delay=2):
        """–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º")
        print("=" * 50)
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        if not self.authenticate_gmail():
            return
        
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
        df = self.read_excel_data(excel_file_path)
        if df is None:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–π –∏ email
        company_col = None
        email_col = None
        
        for col in df.columns:
            col_lower = str(col).lower()
            if '–∫–æ–º–ø–∞–Ω' in col_lower or '–Ω–∞–∑–≤–∞–Ω–∏–µ' in col_lower or col == 'C':
                company_col = col
            elif 'email' in col_lower or '–ø–æ—á—Ç' in col_lower or 'mail' in col_lower or col == 'D':
                email_col = col
        
        if company_col is None:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–π")
            print(f"–ò—â—É —Å—Ç–æ–ª–±—Ü—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ: '–∫–æ–º–ø–∞–Ω', '–Ω–∞–∑–≤–∞–Ω–∏–µ' –∏–ª–∏ 'C'")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
            return
        
        if email_col is None:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å email –∞–¥—Ä–µ—Å–∞–º–∏")
            print(f"–ò—â—É —Å—Ç–æ–ª–±—Ü—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ: 'email', '–ø–æ—á—Ç', 'mail' –∏–ª–∏ 'D'")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
            return
        
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã:")
        print(f"–ö–æ–º–ø–∞–Ω–∏–∏: '{company_col}'")
        print(f"Email: '{email_col}'")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        valid_count = self.preview_data(df, company_col, email_col)
        if valid_count == 0:
            print("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        print(f"\nüìß –¢–µ–º–∞ –ø–∏—Å—å–º–∞: '{subject}'")
        print(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏: {delay} —Å–µ–∫")
        
        confirm = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É? (y/N): ").lower()
        if confirm not in ['y', 'yes', '–¥–∞', '–¥']:
            print("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        sent_count = 0
        failed_count = 0
        
        print("\nüì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É...")
        print("-" * 50)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º
        for index, row in df.iterrows():
            company_name = row.get(company_col, '')
            email = row.get(email_col, '')
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if pd.isna(company_name) or pd.isna(email) or not company_name or not email:
                continue
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω
            template = random.choice(self.templates)
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            message_text = template.format(company_name=company_name)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.create_message(email, subject, message_text)
            
            success, result = self.send_message(message)
            
            if success:
                sent_count += 1
                template_num = self.templates.index(template) + 1
                print(f"‚úÖ {sent_count}. {company_name} ({email}) - –®–∞–±–ª–æ–Ω {template_num}")
            else:
                failed_count += 1
                print(f"‚ùå {company_name} ({email}) - –û—à–∏–±–∫–∞: {result}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            if index < len(df) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞
                time.sleep(delay)
        
        print("\n" + "=" * 50)
        print("üìà –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed_count}")
        print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {sent_count + failed_count}")
        print("=" * 50)

def main():
    print("üìß Email Sender - –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º")
    print("=" * 50)
    
    sender = EmailSender()
    
    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É Excel —Ñ–∞–π–ª—É
    excel_file = input("üìÇ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É: ").strip().strip('"')
    
    if not excel_file:
        print("‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    subject = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞"
    delay = 3  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    print(f"\nüìß –¢–µ–º–∞ –ø–∏—Å—å–º–∞: {subject}")
    print(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏: {delay} —Å–µ–∫")
    print("üìù –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è 2 —Å–ª—É—á–∞–π–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞ –ø–∏—Å–µ–º")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º
    sender.send_bulk_emails(excel_file, subject, delay)
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    main()
